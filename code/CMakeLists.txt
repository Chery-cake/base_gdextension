cmake_minimum_required(VERSION 3.23)

MACRO(FILE_FINDER return_list)
    FILE(GLOB_RECURSE new_list *.h *.hpp *.cpp *.c *.o *.obj *.d *.a *.lib)

    set (EXCLUDE_DIR "/unused/")

    SET(dir_list "")
    FOREACH(file_path ${new_list})

    	string (FIND ${file_path} ${EXCLUDE_DIR} EXCLUDE_DIR_FOUND)

        if (${EXCLUDE_DIR_FOUND} EQUAL -1)
            SET(dir_list ${dir_list} ${file_path})
	    endif()

    ENDFOREACH()
    LIST(REMOVE_DUPLICATES dir_list)
    SET(${return_list} ${dir_list})
ENDMACRO()

set(CMAKE_VERBOSE_MAKEFILE on)

#set(CMAKE_TOOLCHAIN_FILE ${CMAKE_SOURCE_DIR}/../cmake_toolchains/Windows.cmake)

set(PROJECT_NAME World)

project(${PROJECT_NAME} LANGUAGES C CXX)

set(CMAKE_C_STANDARD 23)
set(CMAKE_CXX_STANDARD 23)

set(CMAKE_BUILD_TYPE Release)

set(BUILD_PATH ${CMAKE_SOURCE_DIR}/../godot/bin)

string(TOLOWER "${CMAKE_SYSTEM_NAME}" SYSTEM_NAME)
string(TOLOWER "${CMAKE_BUILD_TYPE}" BUILD_TYPE)
set(MY_SYSTEM_OUTPUT_PATH ${CMAKE_SYSTEM_NAME})

set(BUILD_PATH ${BUILD_PATH}/${MY_SYSTEM_OUTPUT_PATH})

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${BUILD_PATH}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${BUILD_PATH}")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${BUILD_PATH}")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${BUILD_PATH}")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${BUILD_PATH}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${BUILD_PATH}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "${BUILD_PATH}")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${BUILD_PATH}")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${BUILD_PATH}")

set(COMPILER_FLAGS "-fPIC -Wwrite-strings")
if(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
    set(LINKER_FLAGS "-static -static-libgcc -static-libstdc++")
endif()

# that's just quick and dirty folder cleanup, actually CMake would detect what has changed
file(REMOVE_RECURSE ${BUILD_PATH})
file(MAKE_DIRECTORY  ${BUILD_PATH})

add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../lib build)

FILE_FINDER(FILES)

add_library(${PROJECT_NAME} SHARED ${FILES})

ADD_DEFINITIONS(-DNDEBUG)
ADD_DEFINITIONS(-fPIC)

target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src/gdextension)
#target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src)

ADDGODOT()

set_property(TARGET ${PROJECT_NAME} APPEND_STRING PROPERTY COMPILE_FLAGS ${COMPILER_FLAGS})
set_property(TARGET ${PROJECT_NAME} APPEND_STRING PROPERTY LINK_FLAGS ${LINKER_FLAGS})
set_property(TARGET ${PROJECT_NAME} PROPERTY POSITION_INDEPENDENT_CODE ON)
